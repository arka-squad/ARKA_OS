
# ARKORE12 — Action Keys (version 2.1.0)
# Objectif: exposer 96 actions normalisées via des ancres réutilisables

id: ARKORE12-ACTION-KEYS
version: 2.1.0
title: "Clés d’action LLM (ensemble complet)"
summary: >
  Ensemble complet de 96 actions structurées via ancres YAML pour couvrir la
  structure projet, la gestion des livrables et la gouvernance. Chaque action
  référence les briques ARKORE existantes (paths, patterns, event bus) et
  déclenche les mises à jour mémoire.
maintainers: ["agp", "pmo"]
sources:
  - "04-processus-workflows.md"
  - "05-specifications-execution.md"
  - "08-chemins-gouvernance-fondamentaux.md"
  - "09-patterns-nommage-artefacts.md"

exports:
  action_templates:
    base_create: &base_create
      operation: CREATE
      validations:
        - "filename_policy.no_spaces"
        - "name matches regex"
        - "parent_exists:pass"
      post:
        - "ARKORE14-MEMORY-OPS:operations.MEMORY_UPDATE"

    base_read: &base_read
      operation: READ
      validations:
        - "exists:pass"
        - "permissions:read"
      outputs:
        content: { type: object }
        metadata: { type: object }
        path: { type: string }
      post:
        - "ARKORE14-MEMORY-OPS:operations.MEMORY_UPDATE"

    base_update: &base_update
      operation: UPDATE
      validations:
        - "exists:pass"
        - "permissions:update"
        - "validate_updates:pass"
      outputs:
        updated: { type: object }
        previous: { type: object }
      post:
        - "ARKORE14-MEMORY-OPS:operations.MEMORY_UPDATE"

    base_delete: &base_delete
      operation: DELETE
      validations:
        - "exists:pass"
        - "permissions:delete"
        - "no_dependencies:pass"
      outputs:
        deleted: { type: string }
        archived_to: { type: string }
      post:
        - "ARKORE14-MEMORY-OPS:operations.MEMORY_UPDATE"

    base_move: &base_move
      operation: MOVE
      validations:
        - "exists:pass"
        - "permissions:move"
        - "target_valid:pass"
        - "no_circular:pass"
      outputs:
        moved_from: { type: string }
        moved_to: { type: string }
      post:
        - "ARKORE14-MEMORY-OPS:operations.MEMORY_UPDATE"

    base_rename: &base_rename
      operation: RENAME
      validations:
        - "exists:pass"
        - "permissions:rename"
        - "new_name_valid:pass"
        - "no_conflicts:pass"
      outputs:
        old_id: { type: string }
        new_id: { type: string }
      post:
        - "ARKORE14-MEMORY-OPS:operations.MEMORY_UPDATE"

    base_archive: &base_archive
      operation: ARCHIVE
      validations:
        - "exists:pass"
        - "permissions:archive"
        - "ready_for_archive:pass"
      handoff_ref: "ARKORE07-ARCHIVISTE-MODULE:archive.handoff"
      outputs:
        archived_path: { type: string }
        archive_id: { type: string }
      post:
        - "ARKORE14-MEMORY-OPS:operations.MEMORY_UPDATE"

    base_status: &base_status
      operation: STATUS
      validations:
        - "exists:pass"
        - "permissions:status"
        - "valid_transition:pass"
      outputs:
        old_status: { type: string }
        new_status: { type: string }
      post:
        - "ARKORE14-MEMORY-OPS:operations.MEMORY_UPDATE"

    base_publish: &base_publish
      operation: PUBLISH
      validations:
        - "exists:pass"
        - "permissions:publish"
        - "ready_to_publish:pass"
        - "approval_received:pass"
      outputs:
        published_url: { type: string }
        version: { type: string }
      post:
        - "ARKORE14-MEMORY-OPS:operations.MEMORY_UPDATE"

  type_configs:
    feature_cfg: &feature_cfg
      path_ref: "ARKORE08-PATHS-GOVERNANCE:paths.features_root"
      pattern_ref: "ARKORE09-NAMING-PATTERNS:patterns.feature"
      regex_ref: "ARKORE09-NAMING-PATTERNS:regex.feature"

    epic_cfg: &epic_cfg
      path_ref: "ARKORE08-PATHS-GOVERNANCE:paths.epics_root"
      pattern_ref: "ARKORE09-NAMING-PATTERNS:patterns.epic"
      regex_ref: "ARKORE09-NAMING-PATTERNS:regex.epic"

    us_cfg: &us_cfg
      path_ref: "ARKORE08-PATHS-GOVERNANCE:paths.user_stories_root"
      pattern_ref: "ARKORE09-NAMING-PATTERNS:patterns.user_story"
      regex_ref: "ARKORE09-NAMING-PATTERNS:regex.user_story"

    ticket_cfg: &ticket_cfg
      path_ref: "ARKORE08-PATHS-GOVERNANCE:paths.tickets_root"
      pattern_ref: "ARKORE09-NAMING-PATTERNS:patterns.ticket"
      regex_ref: "ARKORE09-NAMING-PATTERNS:regex.ticket"

    document_cfg: &document_cfg
      path_ref: "ARKORE08-PATHS-GOVERNANCE:paths.deliverables.documents_root"
      pattern_ref: "ARKORE09-NAMING-PATTERNS:patterns.document"
      regex_ref: "ARKORE09-NAMING-PATTERNS:regex.document"

    report_cfg: &report_cfg
      path_ref: "ARKORE08-PATHS-GOVERNANCE:paths.deliverables.reports_root"
      pattern_ref: "ARKORE09-NAMING-PATTERNS:patterns.report"
      regex_ref: "ARKORE09-NAMING-PATTERNS:regex.report"

    analysis_cfg: &analysis_cfg
      path_ref: "ARKORE08-PATHS-GOVERNANCE:paths.deliverables.analysis_root"
      pattern_ref: "ARKORE09-NAMING-PATTERNS:patterns.analysis"
      regex_ref: "ARKORE09-NAMING-PATTERNS:regex.analysis"

    plan_cfg: &plan_cfg
      path_ref: "ARKORE08-PATHS-GOVERNANCE:paths.deliverables.plans_root"
      pattern_ref: "ARKORE09-NAMING-PATTERNS:patterns.plan"
      regex_ref: "ARKORE09-NAMING-PATTERNS:regex.plan"

    contract_cfg: &contract_cfg
      path_ref: "ARKORE08-PATHS-GOVERNANCE:paths.deliverables.contracts_root"
      pattern_ref: "ARKORE09-NAMING-PATTERNS:patterns.contract"
      regex_ref: "ARKORE09-NAMING-PATTERNS:regex.contract"

    order_cfg: &order_cfg
      path_ref: "ARKORE08-PATHS-GOVERNANCE:paths.governance.orders_root"
      pattern_ref: "ARKORE09-NAMING-PATTERNS:patterns.order"
      regex_ref: "ARKORE09-NAMING-PATTERNS:regex.order"
      file_type: json

    decision_cfg: &decision_cfg
      path_ref: "ARKORE08-PATHS-GOVERNANCE:paths.governance.decisions_root"
      pattern_ref: "ARKORE09-NAMING-PATTERNS:patterns.decision"
      regex_ref: "ARKORE09-NAMING-PATTERNS:regex.decision"

  action_keys:
    # === FEATURE ===
    FEATURE_CREATE:
      <<: [*base_create, *feature_cfg]
      inputs: [featureId, title, kebab_title]
      paths:
        dir_ref: "ARKORE08-PATHS-GOVERNANCE:path_templates.feature_dir"
      naming:
        pattern_ref: "ARKORE09-NAMING-PATTERNS:patterns.feature"
        regex_ref: "ARKORE09-NAMING-PATTERNS:regex.feature"
      create:
        dirs: ["${feature_dir}", "${feature_dir}CR/", "${feature_dir}EPICS/", "${feature_dir}review-pass-agp/"]
        files: ["${feature_dir}README.md"]
      templates:
        readme_ref: "ARKORE13-TEMPLATES:feature.readme"
      validations:
        - "filename_policy.no_spaces"
        - "name matches regex.feature"
        - "parent_exists:pass"

    FEATURE_READ:    { <<: [*base_read, *feature_cfg], inputs: [featureId] }
    FEATURE_UPDATE:  { <<: [*base_update, *feature_cfg], inputs: [featureId, updates] }
    FEATURE_DELETE:  { <<: [*base_delete, *feature_cfg], inputs: [featureId, reason] }
    FEATURE_MOVE:    { <<: [*base_move, *feature_cfg], inputs: [featureId, destination] }
    FEATURE_RENAME:  { <<: [*base_rename, *feature_cfg], inputs: [featureId, newId, newTitle] }
    FEATURE_ARCHIVE: { <<: [*base_archive, *feature_cfg], inputs: [featureId] }
    FEATURE_STATUS:  { <<: [*base_status, *feature_cfg], inputs: [featureId, status] }

    # === EPIC ===
    EPIC_CREATE:
      <<: [*base_create, *epic_cfg]
      inputs: [featureId, epicId, title, kebab_title]
      associations:
        feature_dir_ref: "ARKORE08-PATHS-GOVERNANCE:path_templates.feature_dir"
      paths:
        dir_ref: "ARKORE08-PATHS-GOVERNANCE:path_templates.epic_dir"
      create:
        dirs: ["${epic_dir}", "${epic_dir}CR/", "${epic_dir}US/"]
        files: ["${epic_dir}README.md"]
      templates:
        readme_ref: "ARKORE13-TEMPLATES:epic.readme"
      validations:
        - "filename_policy.no_spaces"
        - "name matches regex.epic"
        - "parent_exists:pass"

    EPIC_READ:       { <<: [*base_read, *epic_cfg], inputs: [featureId, epicId] }
    EPIC_UPDATE:     { <<: [*base_update, *epic_cfg], inputs: [featureId, epicId, updates] }
    EPIC_DELETE:     { <<: [*base_delete, *epic_cfg], inputs: [featureId, epicId, reason] }
    EPIC_MOVE:       { <<: [*base_move, *epic_cfg], inputs: [featureId, epicId, newFeatureId] }
    EPIC_RENAME:     { <<: [*base_rename, *epic_cfg], inputs: [featureId, epicId, newId, newTitle] }
    EPIC_ARCHIVE:    { <<: [*base_archive, *epic_cfg], inputs: [featureId, epicId] }
    EPIC_STATUS:     { <<: [*base_status, *epic_cfg], inputs: [featureId, epicId, status] }

    # === CHANGE REQUESTS ===
    CR_CREATE:
      inputs: [targetType, targetId, crId, title, date, description, featureId?, epicId?]
      naming:
        pattern_ref: "ARKORE09-NAMING-PATTERNS:patterns.change_request"
        regex_ref: "ARKORE09-NAMING-PATTERNS:regex.change_request"
      paths:
        feature_dir_ref: "ARKORE08-PATHS-GOVERNANCE:path_templates.feature_cr_dir"
        epic_dir_ref: "ARKORE08-PATHS-GOVERNANCE:path_templates.epic_cr_dir"
      templates:
        cr_ref: "ARKORE13-TEMPLATES:change_request.default"
      validations:
        - "target_exists:pass"
        - "naming_valid:pass"
      post:
        - "ARKORE14-MEMORY-OPS:operations.MEMORY_UPDATE"
      event_hooks:
        - "ARKORE16-EVENT-BUS:emit.CR_CREATED"

    CR_READ:
      <<: *base_read
      inputs: [targetType, targetId, crId, featureId?, epicId?]
      paths:
        feature_dir_ref: "ARKORE08-PATHS-GOVERNANCE:path_templates.feature_cr_dir"
        epic_dir_ref: "ARKORE08-PATHS-GOVERNANCE:path_templates.epic_cr_dir"

    # === AGP REVIEWS ===
    AGP_REVIEW_CREATE:
      inputs: [featureId, date, status, comments, reviewer]
      authority_required: ["agp"]
      naming:
        pattern_ref: "ARKORE09-NAMING-PATTERNS:patterns.agp_review"
        regex_ref: "ARKORE09-NAMING-PATTERNS:regex.agp_review"
      paths:
        dir_ref: "ARKORE08-PATHS-GOVERNANCE:path_templates.feature_reviews_dir"
      templates:
        review_ref: "ARKORE13-TEMPLATES:agp.review"
      validations:
        - "feature_exists:pass"
        - "status_valid:pass"
      post:
        - "ARKORE14-MEMORY-OPS:operations.MEMORY_UPDATE"
      event_hooks:
        - "ARKORE16-EVENT-BUS:emit.AGP_REVIEW_CREATED"
        - "ARKORE16-EVENT-BUS:emit.GATE_NOTIFY"

    AGP_REVIEW_READ:
      <<: *base_read
      inputs: [featureId, reviewId]
      paths:
        dir_ref: "ARKORE08-PATHS-GOVERNANCE:path_templates.feature_reviews_dir"

    # === USER STORY ===
    US_CREATE:
      <<: [*base_create, *us_cfg]
      inputs: [featureId, epicId, usId, title, kebab_title]
      associations:
        feature_dir_ref: "ARKORE08-PATHS-GOVERNANCE:path_templates.feature_dir"
        epic_dir_ref: "ARKORE08-PATHS-GOVERNANCE:path_templates.epic_dir"
      paths:
        dir_ref: "ARKORE08-PATHS-GOVERNANCE:path_templates.us_dir"
        evidence_dir: "${us_dir}evidence/"
        tickets_dir: "${us_dir}tickets/"
      create:
        dirs: ["${us_dir}", "${us_dir}evidence/", "${us_dir}tickets/"]
        files: ["${us_dir}README.md"]
      templates:
        readme_ref: "ARKORE13-TEMPLATES:us.readme"
        acceptance_ref: "ARKORE13-TEMPLATES:us.acceptance_checklist"
      link_specs:
        acceptance_criteria_ref: "ARKORE05-EXECUTION-SPECS:acceptance"
      validations:
        - "filename_policy.no_spaces"
        - "name matches regex.user_story"
        - "structure_policy.required_files_in_us present"

    US_READ:         { <<: [*base_read, *us_cfg], inputs: [featureId, epicId, usId] }
    US_UPDATE:       { <<: [*base_update, *us_cfg], inputs: [featureId, epicId, usId, updates] }
    US_DELETE:       { <<: [*base_delete, *us_cfg], inputs: [featureId, epicId, usId, reason] }
    US_MOVE:         { <<: [*base_move, *us_cfg], inputs: [featureId, epicId, usId, newEpicId] }
    US_RENAME:       { <<: [*base_rename, *us_cfg], inputs: [featureId, epicId, usId, newId, newTitle] }
    US_ARCHIVE:      { <<: [*base_archive, *us_cfg], inputs: [featureId, epicId, usId] }
    US_STATUS:       { <<: [*base_status, *us_cfg], inputs: [featureId, epicId, usId, status] }

    # === TICKET ===
    TICKET_CREATE:
      <<: [*base_create, *ticket_cfg]
      inputs: [featureId, epicId, usId, ticketId, title, kebab_title]
      paths:
        dir_ref: "ARKORE08-PATHS-GOVERNANCE:path_templates.ticket_dir"
      create:
        dirs: ["${ticket_dir}"]
        files: ["${ticket_dir}WORK.md", "${ticket_dir}.todo.md"]
      templates:
        work_ref: "ARKORE13-TEMPLATES:ticket.work"
      validations:
        - "filename_policy.no_spaces"
        - "name matches regex.ticket"
        - "parent_exists:pass"

    TICKET_READ:     { <<: [*base_read, *ticket_cfg], inputs: [featureId, epicId, usId, ticketId] }
    TICKET_UPDATE:   { <<: [*base_update, *ticket_cfg], inputs: [featureId, epicId, usId, ticketId, updates] }
    TICKET_DELETE:   { <<: [*base_delete, *ticket_cfg], inputs: [featureId, epicId, usId, ticketId, reason] }
    TICKET_MOVE:     { <<: [*base_move, *ticket_cfg], inputs: [featureId, epicId, usId, ticketId, newUsId] }
    TICKET_RENAME:   { <<: [*base_rename, *ticket_cfg], inputs: [featureId, epicId, usId, ticketId, newId, newTitle] }
    TICKET_ARCHIVE:  { <<: [*base_archive, *ticket_cfg], inputs: [featureId, epicId, usId, ticketId] }
    TICKET_STATUS:   { <<: [*base_status, *ticket_cfg], inputs: [featureId, epicId, usId, ticketId, status] }

    TICKET_CLOSE:
      inputs: [featureId, epicId, usId, ticketId]
      move:
        src: "${ticket_dir}"
        dst: "${us_dir}evidence/"
        keep: ["*_SUMMARY.md", "*_TESTS.md", "*_PERF.md", "approvals.json"]
      link_archive:
        handoff_ref: "ARKORE07-ARCHIVISTE-MODULE:archive.handoff"
      post:
        - "ARKORE14-MEMORY-OPS:operations.MEMORY_UPDATE"
      event_hooks:
        - "ARKORE16-EVENT-BUS:emit.TICKET_CLOSED"

    TICKET_VALIDATE:
      <<: [*base_status, *ticket_cfg]
      inputs: [featureId, epicId, usId, ticketId, status, notes?]
      allowed_status: ["validated", "rejected"]
      validations:
        - "exists:pass"
        - "permissions:status"
        - "tests_complete:pass"

    # === DOCUMENTS ===
    DOCUMENT_CREATE:
      <<: [*base_create, *document_cfg]
      inputs: [documentId, type, title, kebab_title, content]
    DOCUMENT_READ:    { <<: [*base_read, *document_cfg], inputs: [documentId] }
    DOCUMENT_UPDATE:  { <<: [*base_update, *document_cfg], inputs: [documentId, updates] }
    DOCUMENT_DELETE:  { <<: [*base_delete, *document_cfg], inputs: [documentId, reason] }
    DOCUMENT_MOVE:    { <<: [*base_move, *document_cfg], inputs: [documentId, destination] }
    DOCUMENT_RENAME:  { <<: [*base_rename, *document_cfg], inputs: [documentId, newId, newTitle] }
    DOCUMENT_ARCHIVE: { <<: [*base_archive, *document_cfg], inputs: [documentId] }
    DOCUMENT_STATUS:  { <<: [*base_status, *document_cfg], inputs: [documentId, status] }
    DOCUMENT_PUBLISH: { <<: [*base_publish, *document_cfg], inputs: [documentId, version] }

    SPEC_CREATE:
      <<: [*base_create, *document_cfg]
      inputs: [documentId, title, scope, stakeholders, acceptance]
      metadata:
        category: spec

    GUIDELINES_CREATE:
      <<: [*base_create, *document_cfg]
      inputs: [documentId, title, scope, audience, policies]
      metadata:
        category: guidelines

    CONTENT_CREATE:
      <<: [*base_create, *document_cfg]
      inputs: [documentId, channel, title, brief, content]
      metadata:
        category: content_asset

    SURVEY_CREATE:
      <<: [*base_create, *document_cfg]
      inputs: [documentId, title, audience, questions]
      metadata:
        category: survey

    TEMPLATE_CREATE:
      <<: [*base_create, *document_cfg]
      inputs: [documentId, template_type, title, placeholders]
      metadata:
        category: template

    PUBLISH_CONTENT:
      <<: [*base_publish, *document_cfg]
      inputs: [documentId, channel, version]
      metadata:
        category: content_asset

    # === REPORTS ===
    REPORT_CREATE:
      <<: [*base_create, *report_cfg]
      inputs: [reportId, type, title, date, content]
    REPORT_READ:     { <<: [*base_read, *report_cfg], inputs: [reportId] }
    REPORT_UPDATE:   { <<: [*base_update, *report_cfg], inputs: [reportId, updates] }
    REPORT_DELETE:   { <<: [*base_delete, *report_cfg], inputs: [reportId, reason] }
    REPORT_MOVE:     { <<: [*base_move, *report_cfg], inputs: [reportId, destination] }
    REPORT_RENAME:   { <<: [*base_rename, *report_cfg], inputs: [reportId, newId] }
    REPORT_ARCHIVE:  { <<: [*base_archive, *report_cfg], inputs: [reportId] }
    REPORT_STATUS:   { <<: [*base_status, *report_cfg], inputs: [reportId, status] }
    REPORT_PUBLISH:  { <<: [*base_publish, *report_cfg], inputs: [reportId, channels] }

    DASHBOARD_CREATE:
      <<: [*base_create, *report_cfg]
      inputs: [reportId, title, widgets, refresh_policy]
      metadata:
        category: dashboard

    DASHBOARD_UPDATE:
      <<: [*base_update, *report_cfg]
      inputs: [reportId, updates]
      metadata:
        category: dashboard

    # === ANALYSIS ===
    ANALYSIS_CREATE:
      <<: [*base_create, *analysis_cfg]
      inputs: [analysisId, scope, title, kebab_title, data]
    ANALYSIS_READ:    { <<: [*base_read, *analysis_cfg], inputs: [analysisId] }
    ANALYSIS_UPDATE:  { <<: [*base_update, *analysis_cfg], inputs: [analysisId, updates] }
    ANALYSIS_DELETE:  { <<: [*base_delete, *analysis_cfg], inputs: [analysisId, reason] }
    ANALYSIS_MOVE:    { <<: [*base_move, *analysis_cfg], inputs: [analysisId, destination] }
    ANALYSIS_RENAME:  { <<: [*base_rename, *analysis_cfg], inputs: [analysisId, newId, newTitle] }
    ANALYSIS_ARCHIVE: { <<: [*base_archive, *analysis_cfg], inputs: [analysisId] }
    ANALYSIS_STATUS:  { <<: [*base_status, *analysis_cfg], inputs: [analysisId, status] }
    ANALYSIS_PUBLISH: { <<: [*base_publish, *analysis_cfg], inputs: [analysisId, format] }

    ASSESSMENT_CREATE:
      <<: [*base_create, *analysis_cfg]
      inputs: [analysisId, subject, criteria, scorings, recommendations]
      metadata:
        category: assessment

    BENCHMARK_CREATE:
      <<: [*base_create, *analysis_cfg]
      inputs: [analysisId, scope, peers, metrics, summary]
      metadata:
        category: benchmark

    AUTOMATION_CREATE:
      <<: [*base_create, *analysis_cfg]
      inputs: [analysisId, process, triggers, actions, safeguards]
      metadata:
        category: automation

    EXPERIMENT_CREATE:
      <<: [*base_create, *analysis_cfg]
      inputs: [analysisId, hypothesis, variants, metrics, plan]
      metadata:
        category: experiment

    INSIGHT_GENERATE:
      <<: [*base_create, *analysis_cfg]
      inputs: [analysisId, dataset, findings, implications]
      metadata:
        category: insight

    MODEL_CREATE:
      <<: [*base_create, *analysis_cfg]
      inputs: [analysisId, name, inputs, outputs, constraints]
      metadata:
        category: model

    SIMULATION_RUN:
      <<: [*base_create, *analysis_cfg]
      inputs: [analysisId, scenario, assumptions, iterations, results]
      metadata:
        category: simulation

    SOURCING:
      <<: [*base_create, *analysis_cfg]
      inputs: [analysisId, needs, suppliers, evaluation, recommendation]
      metadata:
        category: sourcing

    TEST_RUN:
      <<: [*base_create, *analysis_cfg]
      inputs: [analysisId, suite, environment, results, followups]
      metadata:
        category: test_execution

    # === PLANS ===
    PLAN_CREATE:
      <<: [*base_create, *plan_cfg]
      inputs: [planId, type, title, version, sections]
    PLAN_READ:       { <<: [*base_read, *plan_cfg], inputs: [planId] }
    PLAN_UPDATE:     { <<: [*base_update, *plan_cfg], inputs: [planId, updates] }
    PLAN_DELETE:     { <<: [*base_delete, *plan_cfg], inputs: [planId, reason] }
    PLAN_MOVE:       { <<: [*base_move, *plan_cfg], inputs: [planId, destination] }
    PLAN_RENAME:     { <<: [*base_rename, *plan_cfg], inputs: [planId, newId, newVersion] }
    PLAN_ARCHIVE:    { <<: [*base_archive, *plan_cfg], inputs: [planId] }
    PLAN_STATUS:     { <<: [*base_status, *plan_cfg], inputs: [planId, status] }
    PLAN_PUBLISH:    { <<: [*base_publish, *plan_cfg], inputs: [planId, approvers] }

    STRATEGY_CREATE:
      <<: [*base_create, *plan_cfg]
      inputs: [planId, title, horizon, objectives, levers]
      metadata:
        category: strategy

    ROADMAP_CREATE:
      <<: [*base_create, *plan_cfg]
      inputs: [planId, title, timeframe, milestones]
      metadata:
        category: roadmap

    PROGRAM_CREATE:
      <<: [*base_create, *plan_cfg]
      inputs: [planId, title, owner, streams, success_metrics]
      metadata:
        category: program

    PROCESS_DESIGN:
      <<: [*base_create, *plan_cfg]
      inputs: [planId, title, scope, steps, raci]
      metadata:
        category: process

    EDITORIAL_PLAN_CREATE:
      <<: [*base_create, *plan_cfg]
      inputs: [planId, title, channels, cadence, themes]
      metadata:
        category: editorial_plan

    CURRICULUM_DESIGN:
      <<: [*base_create, *plan_cfg]
      inputs: [planId, title, audience, modules, outcomes]
      metadata:
        category: curriculum

    DELEGATION_CREATE:
      <<: [*base_create, *plan_cfg]
      inputs: [planId, title, delegate, scope, authority]
      metadata:
        category: delegation

    # === CONTRACTS ===
    CONTRACT_CREATE:
      <<: [*base_create, *contract_cfg]
      inputs: [contractId, parties, date, title, terms]
    CONTRACT_READ:    { <<: [*base_read, *contract_cfg], inputs: [contractId] }
    CONTRACT_UPDATE:  { <<: [*base_update, *contract_cfg], inputs: [contractId, amendments] }
    CONTRACT_DELETE:  { <<: [*base_delete, *contract_cfg], inputs: [contractId, legal_reason] }
    CONTRACT_MOVE:    { <<: [*base_move, *contract_cfg], inputs: [contractId, destination] }
    CONTRACT_RENAME:  { <<: [*base_rename, *contract_cfg], inputs: [contractId, newId] }
    CONTRACT_ARCHIVE: { <<: [*base_archive, *contract_cfg], inputs: [contractId] }
    CONTRACT_STATUS:  { <<: [*base_status, *contract_cfg], inputs: [contractId, status] }
    CONTRACT_PUBLISH: { <<: [*base_publish, *contract_cfg], inputs: [contractId, signatories] }

    # === ORDERS ===
    ORDER_CREATE:
      <<: [*base_create, *order_cfg]
      inputs: [orderId, severity, target, directive, deadline]
      authority_required: ["agp", "owner"]
      validations:
        - "filename_policy.no_spaces"
        - "name matches regex"
        - "authority:pass"

    ORDER_READ:      { <<: [*base_read, *order_cfg], inputs: [orderId] }
    ORDER_UPDATE:
      <<: [*base_update, *order_cfg]
      inputs: [orderId, updates]
      authority_required: ["agp", "owner"]
      validations:
        - "exists:pass"
        - "permissions:update"
        - "validate_updates:pass"
        - "authority:pass"

    ORDER_DELETE:
      <<: [*base_delete, *order_cfg]
      inputs: [orderId, reason]
      authority_required: ["owner"]
      validations:
        - "exists:pass"
        - "permissions:delete"
        - "no_dependencies:pass"
        - "authority:pass"

    ORDER_ASSIGN:
      <<: [*base_update, *order_cfg]
      inputs: [orderId, assignee]
      validations:
        - "exists:pass"
        - "permissions:update"
        - "validate_updates:pass"
        - "authority:pass"
        - "target_exists:pass"

    ORDER_VALIDATE:
      <<: [*base_status, *order_cfg]
      inputs: [orderId, validation]
      outputs:
        validated_by: { type: string }
        timestamp: { type: string }

    ORDER_CANCEL:
      <<: [*base_status, *order_cfg]
      inputs: [orderId, cancellation_reason]
      authority_required: ["agp", "owner"]

    ORDER_ESCALATE:
      <<: [*base_update, *order_cfg]
      inputs: [orderId, escalate_to, reason]
      notifications: ["notify:${escalate_to}"]

    # === DECISIONS ===
    DECISION_PUBLISH:
      <<: [*base_publish, *decision_cfg]
      inputs: [decisionId, type, title, date, context, decision, rationale]
      authority_required: ["agp"]
      template_ref: "ARKORE13-TEMPLATES:agp.adr"
    DECISION_ARCHIVE:
      <<: [*base_archive, *decision_cfg]
      inputs: [decisionId]
      retention: "permanent"

    # === ADR ===
    ADR_CREATE:
      <<: [*base_create, *decision_cfg]
      inputs: [decisionId, title, context, status?, options?, decision, rationale]
      authority_required: ["agp", "technical_architect"]
      template_ref: "ARKORE13-TEMPLATES:agp.adr"
      outputs:
        record_path: { type: string }

    # === GATES ===
    GATE_NOTIFY:
      inputs: [gate, scope, status, recipients]
      validations: ["gate_exists:pass", "recipients_valid:pass"]
      notifications_ref: "ARKORE15-AGP-REACTIVE-CONTROL:action_map.ACK"
      post:
        - "ARKORE14-MEMORY-OPS:operations.MEMORY_UPDATE"
      event_hooks:
        - "ARKORE16-EVENT-BUS:emit.GATE_NOTIFIED"

    GATE_BROADCAST:
      inputs: [gate, decision, message]
      authority_required: ["agp", "pmo"]
      broadcast_to: ["all_agents"]
      post:
        - "ARKORE14-MEMORY-OPS:operations.MEMORY_UPDATE"
      event_hooks:
        - "ARKORE16-EVENT-BUS:emit.GATE_BROADCASTED"

    # === COMMUNICATION ===
    MESSAGE_SEND:
      operation: NOTIFY
      inputs: [channel, subject, message, recipients]
      validations:
        - "recipients_valid:pass"
      outputs:
        receipt: { type: object }
      post:
        - "ARKORE14-MEMORY-OPS:operations.MEMORY_UPDATE"

    NOTIFICATION_SEND:
      operation: NOTIFY
      inputs: [topic, payload, severity?, recipients?]
      outputs:
        notification_id: { type: string }
      post:
        - "ARKORE14-MEMORY-OPS:operations.MEMORY_UPDATE"

    # === SUPPORT (actions existantes) ===
    DELIVERY_SUBMIT:
      inputs: [featureId, epicId?, usId?, ticketId?, summary]
      routes:
        notify_ref: "ARKORE15-AGP-REACTIVE-CONTROL:action_map.ACK"
        control_ref: "ARKORE15-AGP-REACTIVE-CONTROL:action_map.CONTROL_EVALUATE"
        return_ref: "ARKORE15-AGP-REACTIVE-CONTROL:action_map.AGP_MISSION_RETURN"
        owner_confirm_ref: "ARKORE15-AGP-REACTIVE-CONTROL:action_map.OPTIONAL_OWNER_CONFIRM"
      flow:
        steps: ["ACK", "CONTROL_EVALUATE", "AGP_MISSION_RETURN", "OPTIONAL_OWNER_CONFIRM"]
      validations:
        - "zones.Z1_ack.policy.max_latency_ref honored"
      post:
        - "ARKORE14-MEMORY-OPS:operations.MEMORY_UPDATE"

    MISSION_INGEST:
      inputs: [mission_record]
      ops:
        - "ARKORE14-MEMORY-OPS:operations.MISSION_INGEST"
      post:
        - "ARKORE14-MEMORY-OPS:operations.MEMORY_UPDATE"

    VALIDATE_NAMING:
      inputs: [featureId?, epicId?, usId?, ticketId?]
      checks:
        feature: "ARKORE09-NAMING-PATTERNS:regex.feature"
        epic: "ARKORE09-NAMING-PATTERNS:regex.epic"
        us: "ARKORE09-NAMING-PATTERNS:regex.user_story"
        ticket: "ARKORE09-NAMING-PATTERNS:regex.ticket"
      post:
        - "ARKORE14-MEMORY-OPS:operations.MEMORY_UPDATE"

    ARCHIVE_CAPTURE:
      inputs: [featureId, epicId, usId]
      validations:
        - "naming_refs.* resolve"
        - "evidence_matrix for S2 includes 'trace' and 'review'"
      handoff_ref: "ARKORE07-ARCHIVISTE-MODULE:archive.handoff"
      post:
        - "ARKORE14-MEMORY-OPS:operations.MEMORY_UPDATE"

    WORKFLOW_PLAN:
      inputs: [workflowName, scope?]
      description: "Planifier un workflow inter-agents et retourner un schéma structuré"
      outputs:
        plan: { type: json, description: "Schéma de plan avec étapes et rôles" }
      post:
        - "ARKORE14-MEMORY-OPS:operations.MEMORY_UPDATE"

    REVIEW_DELIVERABLE:
      inputs: [deliverablePath, reviewer]
      description: "Critiquer et proposer des améliorations sur un livrable donné"
      outputs:
        critique: { type: text, description: "Analyse et commentaires" }
        suggestions: { type: list, items: text }
      post:
        - "ARKORE14-MEMORY-OPS:operations.MEMORY_UPDATE"

  intent_router:
    ADR_CREATE: "ADR_CREATE"
    ANALYSIS_CREATE: "ANALYSIS_CREATE"
    ANALYSIS_READ: "ANALYSIS_READ"
    ARCHIVE_CAPTURE: "ARCHIVE_CAPTURE"
    ASSESSMENT_CREATE: "ASSESSMENT_CREATE"
    AUTOMATION_CREATE: "AUTOMATION_CREATE"
    BENCHMARK_CREATE: "BENCHMARK_CREATE"
    CLOSE_TICKET: "TICKET_CLOSE"
    CONTENT_CREATE: "CONTENT_CREATE"
    CREATE_EPIC: "EPIC_CREATE"
    CREATE_FEATURE: "FEATURE_CREATE"
    CREATE_TICKET: "TICKET_CREATE"
    CREATE_USER_STORY: "US_CREATE"
    CURRICULUM_DESIGN: "CURRICULUM_DESIGN"
    DASHBOARD_CREATE: "DASHBOARD_CREATE"
    DASHBOARD_UPDATE: "DASHBOARD_UPDATE"
    DECISION_ARCHIVE: "DECISION_ARCHIVE"
    DECISION_PUBLISH: "DECISION_PUBLISH"
    DELEGATION_CREATE: "DELEGATION_CREATE"
    DELIVERY_SUBMIT: "DELIVERY_SUBMIT"
    DOCUMENT_CREATE: "DOCUMENT_CREATE"
    DOCUMENT_READ: "DOCUMENT_READ"
    DOCUMENT_UPDATE: "DOCUMENT_UPDATE"
    EDITORIAL_PLAN_CREATE: "EDITORIAL_PLAN_CREATE"
    EPIC_CREATE: "EPIC_CREATE"
    EXPERIMENT_CREATE: "EXPERIMENT_CREATE"
    FEATURE_CREATE: "FEATURE_CREATE"
    GATE_BROADCAST: "GATE_BROADCAST"
    GATE_NOTIFY: "GATE_NOTIFY"
    GUIDELINES_CREATE: "GUIDELINES_CREATE"
    INSIGHT_GENERATE: "INSIGHT_GENERATE"
    MESSAGE_SEND: "MESSAGE_SEND"
    MISSION_INGEST: "MISSION_INGEST"
    MODEL_CREATE: "MODEL_CREATE"
    NOTIFICATION_SEND: "NOTIFICATION_SEND"
    ORDER_CREATE: "ORDER_CREATE"
    ORDER_ESCALATE: "ORDER_ESCALATE"
    PLAN_CREATE: "PLAN_CREATE"
    PLAN_WORKFLOW: "WORKFLOW_PLAN"
    PROCESS_DESIGN: "PROCESS_DESIGN"
    PROGRAM_CREATE: "PROGRAM_CREATE"
    PUBLISH_CONTENT: "PUBLISH_CONTENT"
    RECEIVE_MISSION: "MISSION_INGEST"
    REPORT_CREATE: "REPORT_CREATE"
    REPORT_UPDATE: "REPORT_UPDATE"
    REVIEW_DELIVERABLE: "REVIEW_DELIVERABLE"
    ROADMAP_CREATE: "ROADMAP_CREATE"
    SIMULATION_RUN: "SIMULATION_RUN"
    SOURCING: "SOURCING"
    SPEC_CREATE: "SPEC_CREATE"
    STRATEGY_CREATE: "STRATEGY_CREATE"
    SURVEY_CREATE: "SURVEY_CREATE"
    TEMPLATE_CREATE: "TEMPLATE_CREATE"
    TEST_RUN: "TEST_RUN"
    TICKET_CLOSE: "TICKET_CLOSE"
    TICKET_CREATE: "TICKET_CREATE"
    TICKET_UPDATE: "TICKET_UPDATE"
    TICKET_VALIDATE: "TICKET_VALIDATE"
    US_CREATE: "US_CREATE"
    VALIDATE_NAMING: "VALIDATE_NAMING"
    WORKFLOW_PLAN: "WORKFLOW_PLAN"

  prompt_macros:
    minimal_steps:
      US_CREATE:
        - "Valider le nom via regex.user_story"
        - "Construire ${us_dir} depuis path_templates.us_dir"
        - "Créer dossiers evidence/ et tickets/"
        - "Générer README.md via template us.readme"
        - "Ajouter checklist acceptance (ref ARKORE05)"

provides: ["action_keys", "intent_router", "prompt_macros", "action_templates", "type_configs"]
requires:
  - "ARKORE08-PATHS-GOVERNANCE@>=3.0.0"
  - "ARKORE09-NAMING-PATTERNS@>=2.0.0"
  - "ARKORE05-EXECUTION-SPECS@>=1.0.0"
  - "ARKORE07-ARCHIVISTE-MODULE@>=1.0.0"
  - "ARKORE13-TEMPLATES@>=1.2.0"
  - "ARKORE14-MEMORY-OPS@>=1.1.0"
  - "ARKORE15-AGP-REACTIVE-CONTROL@>=1.0.0"
  - "ARKORE16-EVENT-BUS@>=1.0.0"
contracts:
  invariants:
    - "all action templates define MEMORY_UPDATE in post"
    - "every action under structure/livrables/gouvernance resolves regex/path refs"
    - "event_hooks, when present, emit uppercase action families"
    - "intent_router keys map to defined action_keys"
  schema: "jsonschema://arka/action-keys/v2"
change_policy:
  compatibility: semver
